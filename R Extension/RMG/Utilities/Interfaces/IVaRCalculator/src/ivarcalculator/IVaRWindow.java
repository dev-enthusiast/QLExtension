/*
 * IVaRWindow.java
 *
 * Created on May 16, 2007, 9:15 PM
 */

package ivarcalculator;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.FileFilter;
import java.io.FilenameFilter;
import java.text.NumberFormat;
import java.util.Collections;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.DefaultCellEditor;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableColumn;

/**
 *
 * @author  John
 */
public class IVaRWindow extends javax.swing.JFrame implements PropertyChangeListener {
    
    String baseDir = "S:/All/Risk/Reports/VaR/prod/";
    
    DateCellEditor dateCellEditor = new DateCellEditor();
    
    StatusBean statusBean = StatusBean.getInstance();
    
    /** Creates new form IVaRWindow */
    public IVaRWindow() {
        
        // Install a different look and feel; specifically, the Windows look and feel
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (InstantiationException e) {
        } catch (ClassNotFoundException e) {
        } catch (UnsupportedLookAndFeelException e) {
        } catch (IllegalAccessException e) {
        }
        
        
        initComponents();
        
        statusBean.addPropertyChangeListener(this);
        
        setColumnWidths();
        
        JComboBox comboBox = new JComboBox();
        comboBox.addItem("BUY");
        comboBox.addItem("SELL");
        tradeTable.getColumnModel().getColumn(1).setCellEditor(new DefaultCellEditor(comboBox));
        
        getPortfolioListForDate((String)dateComboBox.getSelectedItem());
        
    }

    private void setColumnWidths() {
        
        TableColumn column = null;
        for (int i = 0; i < tradeTable.getModel().getColumnCount(); i++) {
            column = tradeTable.getColumnModel().getColumn(i);
            if (i == 2) {
                column.setPreferredWidth(200); //third column is bigger
            } else if (i ==3) {
                column.setPreferredWidth(100);
            } else {
                column.setPreferredWidth(30);
            }
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        backgroundPanel = new javax.swing.JPanel();
        tradeBorderPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tradeTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        dateComboBox = new JComboBox(getValidAsOfDates());
        jLabel2 = new javax.swing.JLabel();
        portfolioComboBox = new javax.swing.JComboBox();
        jButton1 = new javax.swing.JButton();
        statusText = new javax.swing.JLabel();
        statusLabel = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        loadMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        cutMenuItem = new javax.swing.JMenuItem();
        copyMenuItem = new javax.swing.JMenuItem();
        pasteMenuItem = new javax.swing.JMenuItem();
        deleteMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentsMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Interactive IVaR Calculator");
        setBackground(null);
        setForeground(new java.awt.Color(236, 233, 216));
        tradeBorderPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Add a Trade..."));
        tradeTable.setModel(new TradeTableModel());
        tradeTable.setEnabled(false);
        jScrollPane1.setViewportView(tradeTable);

        javax.swing.GroupLayout tradeBorderPanelLayout = new javax.swing.GroupLayout(tradeBorderPanel);
        tradeBorderPanel.setLayout(tradeBorderPanelLayout);
        tradeBorderPanelLayout.setHorizontalGroup(
            tradeBorderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tradeBorderPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 527, Short.MAX_VALUE)
                .addContainerGap())
        );
        tradeBorderPanelLayout.setVerticalGroup(
            tradeBorderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tradeBorderPanelLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 145, Short.MAX_VALUE)
                .addContainerGap())
        );

        jLabel1.setText("As of Date:");

        dateComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                handleDateSelection(evt);
            }
        });

        jLabel2.setText("Portfolio:");

        portfolioComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        portfolioComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                handlePortfolioSelection(evt);
            }
        });

        jButton1.setText("Calculate");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calculateButtonHandler(evt);
            }
        });

        statusText.setText("None");

        statusLabel.setText("Status:");

        javax.swing.GroupLayout backgroundPanelLayout = new javax.swing.GroupLayout(backgroundPanel);
        backgroundPanel.setLayout(backgroundPanelLayout);
        backgroundPanelLayout.setHorizontalGroup(
            backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(backgroundPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tradeBorderPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, backgroundPanelLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dateComboBox, 0, 224, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(portfolioComboBox, 0, 224, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, backgroundPanelLayout.createSequentialGroup()
                        .addComponent(statusLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(statusText, javax.swing.GroupLayout.DEFAULT_SIZE, 435, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)))
                .addContainerGap())
        );
        backgroundPanelLayout.setVerticalGroup(
            backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(backgroundPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(portfolioComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dateComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tradeBorderPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(statusLabel)
                    .addComponent(statusText))
                .addContainerGap())
        );

        fileMenu.setText("File");
        loadMenuItem.setText("Open IVaR File...");
        loadMenuItem.setEnabled(false);
        fileMenu.add(loadMenuItem);

        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });

        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        editMenu.setText("Edit");
        cutMenuItem.setText("Cut");
        editMenu.add(cutMenuItem);

        copyMenuItem.setText("Copy");
        editMenu.add(copyMenuItem);

        pasteMenuItem.setText("Paste");
        editMenu.add(pasteMenuItem);

        deleteMenuItem.setText("Delete");
        editMenu.add(deleteMenuItem);

        menuBar.add(editMenu);

        helpMenu.setText("Help");
        contentsMenuItem.setText("Contents");
        helpMenu.add(contentsMenuItem);

        aboutMenuItem.setText("About");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });

        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(backgroundPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(backgroundPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
        AboutDialog dialog = new AboutDialog(this, false);
        dialog.setVisible(true);
    }//GEN-LAST:event_aboutMenuItemActionPerformed
    
    public void propertyChange(PropertyChangeEvent evt) {
        System.out.println("Got PropChangeEvt: "+evt);
        String propertyName = evt.getPropertyName();
        if (propertyName.equals(statusBean.STATUS_PROPERTY)) {
            statusText.setText(statusBean.getStatus());
        }
        else if (propertyName.equals("state"))
        {
            TradeTableModel tableModel = (TradeTableModel) tradeTable.getModel();
            if (tableModel.getSwingWorker().isDone())
            {
                addCurveInfoToComboBox(tableModel);
                tableModel.fireTableDataChanged();
            }
        }
    }
    
    private void handlePortfolioSelection(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_handlePortfolioSelection
        JComboBox combo = (JComboBox)evt.getSource();
        String currentPortfolio = (String)combo.getSelectedItem();
        
        loadPortfolio(currentPortfolio);
        
    }//GEN-LAST:event_handlePortfolioSelection

    private void loadPortfolio(final String currentPortfolio) {
        
        String filePath = baseDir+((String)dateComboBox.getSelectedItem());
        filePath = filePath + "/" + currentPortfolio;
        filePath = filePath + "/" + "ivar."+currentPortfolio+".xls";
        
        TradeTableModel tableModel = (TradeTableModel) tradeTable.getModel();
        tableModel.loadFile(filePath);
        
        tableModel.getSwingWorker().addPropertyChangeListener(this);
        
    }
    
    private void addCurveInfoToComboBox(final TradeTableModel tableModel) {
        
        String[] curveList = tableModel.getCurveList();
        if (curveList == null) 
        {
            tradeTable.setEnabled(false);
        } 
        else 
        {
            
            JComboBox curveComboBox = new JComboBox(curveList);
            curveComboBox.setSelectedItem(null);
            tradeTable.getColumnModel().getColumn(2).setCellEditor(new DefaultCellEditor(curveComboBox));
            
            curveComboBox.addActionListener( new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    JComboBox combo = (JComboBox)e.getSource();
                    String currentCurve = (String)combo.getSelectedItem();
                    
                    if (currentCurve == null) return;
                    
                    JComboBox contractDateComboBox = new JComboBox(
                            tableModel.getContractDatesForCurve(currentCurve) );
                    
                    contractDateComboBox.setSelectedItem(null);
                    
                    dateCellEditor.setBoxForRow(contractDateComboBox, tradeTable.getSelectedRow());
                    tradeTable.getColumnModel().getColumn(3).setCellEditor(dateCellEditor);
                    
                    tableModel.fireTableRowsUpdated(tradeTable.getSelectedRow(),
                            tradeTable.getSelectedRow());
                    
                    //JComboBox nextBox = (JComboBox) tableModel.getValueAt(tradeTable.getSelectedRow()+1, 3);
                    //nextBox.setSelectedItem(null);
                    
                }
            });
            
            tradeTable.setEnabled(true);
        }
    }
    
    private void calculateButtonHandler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calculateButtonHandler
        
        stopCellEditing();
        TradeTableModel tableModel = (TradeTableModel) tradeTable.getModel();
        tableModel.calculateIVaR();
        
        NumberFormat currencyFormat = NumberFormat.getCurrencyInstance();
        Long ivar = tableModel.getIVaR();
        if (ivar != -1)
        {
            String value = currencyFormat.format(ivar);
            statusBean.setStatus("<html>Current IVaR - <B>"+value+"</B></html>");
        }
        else
        {
            statusBean.setStatus("<html><font color=red>Unable to calculate IVaR For Portfolio.</font></html>");
        }
    }//GEN-LAST:event_calculateButtonHandler
    
    public boolean stopCellEditing() {
        int column = tradeTable.getEditingColumn();
        if (column >-1) {
            TableCellEditor cellEditor = tradeTable.getColumnModel().getColumn(column).getCellEditor();
            if (cellEditor == null) {
                cellEditor = tradeTable.getDefaultEditor(tradeTable.getColumnClass(column));
            }
            if (cellEditor != null) {
                cellEditor.stopCellEditing();
            }
        }
        
        return true;
    }
    
    private void handleDateSelection(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_handleDateSelection
        JComboBox combo = (JComboBox)evt.getSource();
        String currentDate = (String)combo.getSelectedItem();
        getPortfolioListForDate(currentDate);
    }//GEN-LAST:event_handleDateSelection

    private void getPortfolioListForDate(final String date) {
        
        String filePath = baseDir+date;
        System.out.println("Listing: "+filePath);
        
        // This filter only returns directories
        FileFilter fileFilter = new FileFilter() {
            public boolean accept(File file) {
                return file.isDirectory();
            }
        };
        File[] files = new File(filePath).listFiles(fileFilter);
        String[] listing = new String[files.length];
        for (int i = 0; i < files.length; i++) {
            listing[i] = files[i].getName();
        }
        portfolioComboBox.setModel(new DefaultComboBoxModel(listing));
        
        loadPortfolio((String)portfolioComboBox.getSelectedItem());
    }
    
    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed
    
    private String[] getValidAsOfDates() {
        String[] validDates = new File(baseDir).list( new FilenameFilter(){
            public boolean accept(File dir, String name) {
                String regex = "2[0-9][0-0][0-9]-[0-1][0-9]-[0-3][0-9]";
                String REGEX = "2[0-9][0-0][0-9]-[0-1][0-9]-[0-3][0-9]";
                Pattern pattern = Pattern.compile(REGEX);
                Matcher matcher = pattern.matcher(name);
                if (matcher.matches()) {
                    return true;
                } else {
                    return false;
                }
            }
        });
        
        java.util.Arrays.sort(validDates, Collections.reverseOrder());
        return validDates;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new IVaRWindow().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JPanel backgroundPanel;
    private javax.swing.JMenuItem contentsMenuItem;
    private javax.swing.JMenuItem copyMenuItem;
    private javax.swing.JMenuItem cutMenuItem;
    private javax.swing.JComboBox dateComboBox;
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuItem loadMenuItem;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem pasteMenuItem;
    private javax.swing.JComboBox portfolioComboBox;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JLabel statusText;
    private javax.swing.JPanel tradeBorderPanel;
    private javax.swing.JTable tradeTable;
    // End of variables declaration//GEN-END:variables
    
}
