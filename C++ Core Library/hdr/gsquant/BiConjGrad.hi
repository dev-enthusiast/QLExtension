/****************************************************************
**
**	BiConjGrad.hi	- Templated bi-conjugate gradient function
**
**	Copyright 2000 - Goldman, Sachs & Co. - New York
**
**	$Log: BiConjGrad.hi,v $
**	Revision 1.1  2000/08/14 22:09:56  lowthg
**	Added some iterative methods of solving linear equations
**
****************************************************************/

#if !defined( IN_BICONJGRAD_HI )
#define IN_BICONJGRAD_HI

#include <gsquant/BiConjGrad.h>

CC_BEGIN_NAMESPACE( Gs )

template < class Matrix, class Vector, class Preconditioner, class Real >
int BiCG(
	const Matrix&		  A,
	Vector&				  x,
	const Vector&		  b,
    const Preconditioner& M,
	int&			      max_iter,
	Real&				  tol
)
{
    Real resid;
    Vector rho_1(1), rho_2(1), alpha(1), beta(1);
    Vector z, ztilde, p, ptilde, q, qtilde;

    Real normb = norm(b);
    Vector r = b - A * x;
    Vector rtilde = r;

    if (normb == 0.0)
        normb = 1;
    
    if ((resid = norm(r) / normb) <= tol)
	{
        tol = resid;
        max_iter = 0;
        return 0;
    }

    for (int i = 1; i <= max_iter; i++)
	{
        z = M.solve(r);
        ztilde = M.trans_solve(rtilde);
        rho_1(0) = dot(z, rtilde);
        if (rho_1(0) == 0)
		{ 
            tol = norm(r) / normb;
            max_iter = i;
            return 2;
        }
        if (i == 1)
		{
            p = z;
            ptilde = ztilde;
        }
		else
		{
            beta(0) = rho_1(0) / rho_2(0);
            p = z + beta(0) * p;
            ptilde = ztilde + beta(0) * ptilde;
        }
        q = A * p;
        qtilde = A.trans_mult(ptilde);
        alpha(0) = rho_1(0) / dot(ptilde, q);
        x += alpha(0) * p;
        r -= alpha(0) * q;
        rtilde -= alpha(0) * qtilde;

        rho_2(0) = rho_1(0);
        if ((resid = norm(r) / normb) < tol)
		{
            tol = resid;
            max_iter = i;
            return 0;
        }
    }

    tol = resid;
    return 1;
}

CC_END_NAMESPACE

#endif
