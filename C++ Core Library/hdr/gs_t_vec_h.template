@{Cmt}
@{Cmt}  This file is used to generate the vector class header files
@{Cmt}	Copyright 1998 - Goldman, Sachs & Co. - New York
@{Cmt}
@{Cmt}
@{Cmt}	$Log: gs_t_vec_h.template,v $
@{Cmt}	Revision 1.22  2001/11/27 22:40:25  procmon
@{Cmt}	Reverted to CPS_SPLIT.
@{Cmt}
@{Cmt}	Revision 1.17  1999/11/03 22:48:34  francm
@{Cmt}	Changes required to make SW4 (with STL compile)
@{Cmt}	
@{Cmt}	Revision 1.16  1999/08/04 12:13:03  vengrd
@{Cmt}	copy() for use with GsHandleCopyOnWrite which now requires it
@{Cmt}	
@{Cmt}	Revision 1.15  1999/08/02 23:15:13  tsoucp
@{Cmt}	took out cbegin cend etc.
@{Cmt}	
@{Cmt}	Revision 1.14  1999/08/02 22:45:14  tsoucp
@{Cmt}	added cbegin cend crbegin crend and prevent iterator invalidation in V whose args are type iterator
@{Cmt}	
@{Cmt}	Revision 1.13  1999/06/23 17:15:17  tsoucp
@{Cmt}	 ref counting in gs_t_vec_ template files and operator * in GsVector
@{Cmt}	
@{Cmt}	Revision 1.12  1999/04/13 11:59:14  gribbg
@{Cmt}	Add support for Hdr dir to GenVectorClass
@{Cmt}	
@{Cmt}	Revision 1.11  1999/02/11 02:15:16  gribbg
@{Cmt}	Add GsString.h
@{Cmt}	
@{Cmt}	Revision 1.10  1999/01/23 03:26:11  gribbg
@{Cmt}	Add typedef for element to allow GenVector to work
@{Cmt}	
@{Cmt}	Revision 1.9  1999/01/23 01:05:19  gribbg
@{Cmt}	Add gsdt_fwd.h
@{Cmt}	
@{Cmt}	Revision 1.8  1999/01/23 00:31:54  gribbg
@{Cmt}	Use GsDtGenVector
@{Cmt}	
@{Cmt}	Revision 1.7  1998/12/30 20:20:52  hammet
@{Cmt}	change "delete" to "delete []".
@{Cmt}	
@{Cmt}	Revision 1.6  1998/12/29 20:08:12  hammet
@{Cmt}	added destructor to standard vector types
@{Cmt}	
@{Cmt}	Revision 1.5  1998/12/04 20:18:22  gribbg
@{Cmt}	Use const_iterator in vector constructor
@{Cmt}	
@{Cmt}	Revision 1.4  1998/10/13 22:39:14  gribbg
@{Cmt}	Cleanup vector classes
@{Cmt}	
@{Cmt}	Revision 1.3  1998/10/13 18:05:17  gribbg
@{Cmt}	Add support for GsDtGeneric
@{Cmt}	
@{Cmt}	Revision 1.2  1998/09/24 21:16:46  bergse
@{Cmt}	fixed type in operator [] definition
@{Cmt}
@{Cmt}	Revision 1.1  1998/09/15 11:38:54  lundek
@{Cmt}	Legitimize the mechanism for generating vector classes
@{Cmt}
@{Param}HdrName		- The name of the header file being generated
@{Param}HdrNameUC	- HdrName in uppercase with _ for /
@{Param}SrcName		- The name of the source file being produced
@{Param}Base		- The base name of the element class
@{Param}HdrBase		- The name of the header file for Base
@{Param}ClassDt		- The GsDt name for Base
@{Define}ClassV		@{Class}Vector
@{Define}ClassVRep	@{Class}VectorRep
@{Define}ClassRI	@{Class}VecRevIter
@{Define}ClassCRI   @{Class}VecConstRevIter
/****************************************************************
**
**	@{HdrName}	- Header for @{ClassV}
**
**	Copyright @{Year} - Goldman, Sachs & Co. - New York
**
@{Cmt}	**  HdrName		@{HdrName}   
@{Cmt}	**  HdrNameUC	@{HdrNameUC} 
@{Cmt}	**  SrcName     @{SrcName}   
@{Cmt}	**  Base        @{Base}      
@{Cmt}	**  HdrBase     @{HdrBase}   
@{Cmt}	**  ClassV      @{ClassV}    
@{Cmt}	**  ClassRI     @{ClassRI}   
@{Cmt}	**  ClassCRI    @{ClassCRI}  
@{Cmt}	**  ClassDt     @{ClassDt}   
@{Cmt}	**
****************************************************************/


#if ! defined(IN_@{HdrNameUC})
#define IN_@{HdrNameUC}

#include <iterator>
#include <stddef.h>
#include <@{HdrBase}>
#include <gscore/GsString.h>
#include <gscore/gsdt_fwd.h>
#include <gscore/GsRefCount.h>
#include <gscore/GsHandle.h>

CC_BEGIN_NAMESPACE( Gs )

/*
**	Classes declared in this header
*/

class @{ClassV};
class @{ClassVRep};
class @{ClassRI};
class @{ClassCRI};

/*
**  class @{ClassRI}
*/

class EXPORT_CLASS_@{ProjectUC} @{ClassRI}
{
public:
	// FIX- The compiler doesn't like this for some reason
	//typedef CC_NS(std,random_access_iterator_tag) iterator_category;
	typedef @{Class} value_type;
	typedef ptrdiff_t difference_type;
	typedef @{Class} *pointer;
	typedef @{Class} &reference;
	typedef @{Class} *iterator_type;

	@{ClassRI}() 
		: m_current() {}


	explicit @{ClassRI}( iterator_type x ) 
		: m_current(x) {}

	iterator_type Class() const  { return m_current; }

	reference operator * () const 
	{
		iterator_type tmp=m_current;
		return *--tmp;
	}

#if defined(CC_NO_ARROW_OPERATOR)
	struct __arrow_helper
	{
		__arrow_helper(pointer ptr) : ptr_(ptr) {;}
		operator pointer () { return ptr_; }
		pointer ptr_;
	};

	__arrow_helper operator-> () const 
	{
		iterator_type tmp(m_current);
		return __arrow_helper(--tmp);
	}

#else
	pointer operator-> () const 
	{
		iterator_type tmp=m_current;
		return --tmp;
	}
#endif

	reference operator [] (difference_type n) const 
	{
		iterator_type tmp=m_current;
		return *(--tmp+n);
	}

	@{ClassRI} &operator++() 
	{
		--m_current;
		return *this;
	}

	@{ClassRI} &operator--() 
	{
		++m_current;
		return *this;
	}

#if ! defined(CC_NO_POSTFIX)
	@{ClassRI} operator++(int) 
	{
		@{ClassRI} tmp(m_current);
		--m_current;
		return tmp;
	}

	@{ClassRI} operator--(int) 
	{
		@{ClassRI} tmp(m_current);
		++m_current;
		return tmp;
	}
#endif /* CC_NO_POSTFIX */

	iterator_type &Class()  { return m_current; }

private:
	iterator_type m_current;
};

inline @{ClassRI} operator+(
	const @{ClassRI} &iter,
	@{ClassRI}::difference_type n
) 
{
	return @{ClassRI}(iter.Class()-n);
}

inline @{ClassRI} &operator+=(
	@{ClassRI} &iter,
	@{ClassRI}::difference_type	n
) 
{
	iter.Class() -= n;
	return iter;
}

inline @{ClassRI} operator-(
	const @{ClassRI} &iter,
	@{ClassRI}::difference_type n
) 
{
	return @{ClassRI}( iter.Class() + n );
}

inline @{ClassRI} &operator-=(
	@{ClassRI} &iter,
	@{ClassRI}::difference_type n
) 
{
	iter.Class()+=n; return iter;
}

inline bool operator == (
	const @{ClassRI} &lop,
	const @{ClassRI} &rop
) 
{
	return lop.Class() == rop.Class();
}

inline bool operator != (
	const @{ClassRI} &lop,
	const @{ClassRI} &rop
) 
{
	return lop.Class() != rop.Class();
}

inline bool operator < (
	const @{ClassRI} &lop,
	const @{ClassRI} &rop
) 
{
	return lop.Class() < rop.Class();
}

inline bool operator > (
	const @{ClassRI} &lop,
	const @{ClassRI} &rop
) 
{
	return lop.Class() > rop.Class();
}

inline bool operator <= (
	const @{ClassRI} &lop,
	const @{ClassRI} &rop
) 
{
	return lop.Class() <= rop.Class();
}

inline bool operator >= (
	const @{ClassRI} &lop,
	const @{ClassRI} &rop
) 
{
	return lop.Class() >= rop.Class();
}


/*
**  class @{ClassCRI}
*/

class EXPORT_CLASS_@{ProjectUC} @{ClassCRI}
{
public:
	//typedef CC_NS(std,random_access_iterator_tag) iterator_category;
	typedef @{Class} value_type;
	typedef ptrdiff_t difference_type;
	typedef const @{Class} *pointer;
	typedef const @{Class} &reference;
	typedef const @{Class} *iterator_type;

	@{ClassCRI}() 
		: m_current() {}

	explicit @{ClassCRI}(iterator_type x) 
		: m_current(x) {}

	iterator_type Class() const  { return m_current; }

	reference operator * () const 
		{ iterator_type tmp=m_current; return *--tmp; }

#if defined(CC_NO_ARROW_OPERATOR)
	struct __arrow_helper
	{
		__arrow_helper(pointer ptr) : ptr_(ptr) {;}
		operator pointer () { return ptr_; }
		pointer ptr_;
	};

	__arrow_helper operator-> () const 
	{
		iterator_type tmp(m_current);
		return __arrow_helper(--tmp);
	}

#else
	pointer operator-> () const 
	{
		iterator_type tmp=m_current;
		return --tmp;
	}
#endif

	reference operator [] (difference_type n) const 
		{ iterator_type tmp(m_current); return *(--tmp+n); }

	@{ClassCRI} &operator++() 
		{ --m_current; return *this; }

	@{ClassCRI} &operator--() 
		{ ++m_current; return *this; }

#if ! defined(CC_NO_POSTFIX)
	@{ClassCRI} operator++(int) 
		{ @{ClassCRI} tmp(m_current); --m_current; return tmp; }

	@{ClassCRI} operator--(int) 
		{ @{ClassCRI} tmp(m_current); ++m_current; return tmp; }
#endif /* CC_NO_POSTFIX */

	iterator_type &Class()  { return m_current; }

private:
	iterator_type m_current;
};


inline @{ClassCRI}  operator+(
	const @{ClassCRI} &iter,
	@{ClassCRI}::difference_type n
) 
{
	return @{ClassCRI}(iter.Class()-n);
}

inline @{ClassCRI} &operator+=(
	@{ClassCRI} &iter,
	@{ClassCRI}::difference_type n
) 
{
	iter.Class()-=n;
	return iter;
}

inline @{ClassCRI} operator-(
	const @{ClassCRI} &iter,
	@{ClassCRI}::difference_type n
) 
{
	return @{ClassCRI}( iter.Class() + n );
}

inline @{ClassCRI} &operator-=(
	@{ClassCRI} &iter,
	@{ClassCRI}::difference_type n
) 
{
	iter.Class()+=n;
	return iter;
}

inline bool operator == (
	const @{ClassCRI} &lop,
	const @{ClassCRI} &rop
) 
{
	return lop.Class() == rop.Class();
}

inline bool operator != (
	const @{ClassCRI} &lop,
	const @{ClassCRI} &rop
) 
{
	return lop.Class() != rop.Class();
}

inline bool operator < (
	const @{ClassCRI} &lop,
	const @{ClassCRI} &rop
) 
{
	return lop.Class() < rop.Class();
}

inline bool operator > (
	const @{ClassCRI} &lop,
	const @{ClassCRI} &rop
) 
{
	return lop.Class() > rop.Class();
}

inline bool operator <= (
	const @{ClassCRI} &lop,
	const @{ClassCRI} &rop
) 
{
	return lop.Class() <= rop.Class();
}

inline bool operator >= (
	const @{ClassCRI} &lop,
	const @{ClassCRI} &rop
) 
{
	return lop.Class() >= rop.Class();
}

/*
**  class @{ClassVRep}
*/

class EXPORT_CLASS_@{ProjectUC} @{ClassVRep} : public GsRefCountCopyOnWrite
{
public:
	typedef @{Class} value_type;
	typedef size_t size_type;
	typedef ptrdiff_t difference_type;

	typedef @{Class}* iterator;
	typedef const @{Class}* const_iterator;
	typedef @{ClassRI} reverse_iterator;
	typedef @{ClassCRI} const_reverse_iterator;

	typedef @{Class} &reference;
	typedef const @{Class} &const_reference;

	// Constructors
	@{ClassVRep}() : m_begin(0), m_end(0), m_max(0) {}
	@{ClassVRep}(size_t);
	@{ClassVRep}(size_t,const value_type &x);
	@{ClassVRep}(const_iterator begin, const_iterator end);
	@{ClassVRep}(const @{ClassVRep} &other);

	// Destructor
	~@{ClassVRep}();

	// Assignment
	@{ClassVRep} &operator = (const @{ClassVRep}&);

	// Copy
	@{ClassVRep} *copy() { return new @{ClassVRep}( *this ); }

	// Element Access
	reference operator [] (int n) { return *(m_begin+n); }
	const_reference operator [] (int n) const { return *(m_begin+n); }

	reference front() { return *m_begin; }
	const_reference front() const  { return *m_begin; }

	reference back()  { return *(m_end-1); }
	const_reference back() const  { return *(m_end-1); }

	// Iterator Access
	iterator begin()  { return m_begin; }
	const_iterator begin() const  { return m_begin; }

	iterator end()  { return m_end; }
	const_iterator end() const  { return m_end; }

	reverse_iterator rbegin() 
	{ return reverse_iterator( m_end ); }

	const_reverse_iterator rbegin() const 
	{ return const_reverse_iterator( m_end ); }

	reverse_iterator rend() { return reverse_iterator( m_begin ); }
	const_reverse_iterator rend() const 
	{ return const_reverse_iterator( m_begin ); }

	// Stack and Queue Operations
	void push_back( const value_type &x ) { insert( m_end, x ); }
	void pop_back()  { erase( m_end - 1 ); }

	// List Operations
	iterator insert( iterator p );
	iterator insert( iterator p, const value_type &x );
	void insert( iterator p, size_type n, const value_type &x);
	void insert( iterator p, const_iterator fist, const_iterator last );
	void erase( iterator p);
	iterator erase( iterator first, iterator last );
	void clear()  { erase( m_begin, m_end ); }

	// Other Operations
	size_type size() const { return m_begin ? m_end - m_begin : 0; }
	size_type empty() const	{ return m_begin == m_end; }
	size_type max_size() const { return /*?*/ 0; }
	size_type capacity() const { return m_begin ? m_max - m_begin : 0; }

	void reserve( size_type n );
	void resize( size_type n );
	void resize( size_type n, const value_type &x );

	bool operator==(const @{ClassVRep} &x) const;
	bool operator<(const @{ClassVRep} &x) const;

private:
	iterator  m_begin;	// Pointer to the first address of
				// allocated memory
	iterator  m_end;	// Pointer to one past the last position
				// filled in the vector (length+1)
	iterator  m_max;	// Pointer to the last position of
				// allocated memory
};

/*
**  class @{ClassV}
*/

class EXPORT_CLASS_@{ProjectUC} @{ClassV} : public GsHandleCopyOnWrite<@{ClassVRep}>
{
public:
	typedef @{ClassVRep}::value_type value_type;
	typedef @{ClassVRep}::size_type size_type;
	typedef @{ClassVRep}::difference_type difference_type;

	typedef @{ClassVRep}::iterator iterator;
	typedef @{ClassVRep}::const_iterator const_iterator;
	typedef @{ClassVRep}::reverse_iterator reverse_iterator;
	typedef @{ClassVRep}::const_reverse_iterator const_reverse_iterator;

	typedef @{ClassVRep}::reference reference;
	typedef @{ClassVRep}::const_reference const_reference;

private: // FIX: used in rend() rbegin() workaround only
	typedef const @{ClassVRep}* const_rep;
public:

	// Constructors
	@{ClassV}();
	@{ClassV}(size_t);
	@{ClassV}(size_t,const value_type &x);
	@{ClassV}(const_iterator begin, const_iterator end);
	@{ClassV}(const @{ClassV} &other);

	// Destructor
	virtual ~@{ClassV}() {}

	// Assignment
	@{ClassV} &operator = (const @{ClassV}&);

	// Element Access
	reference operator [] (int n);
	const_reference operator [] (int n) const { return ( *m_rep )[ n ]; }

	reference front();
	const_reference front() const { return m_rep->front(); }

	reference back();
	const_reference back() const { return m_rep->back(); }

	// Iterator Access
	iterator begin();
	const_iterator begin() const { return m_rep->begin(); }

	iterator end();
	const_iterator end() const { return m_rep->end(); }

	reverse_iterator rbegin();
	/* FIX: comp can't pick correct m_rep->rbegin() so have to cast */
	const_reverse_iterator rbegin() const
	{ const_rep temp = m_rep; return temp->rbegin(); }

	reverse_iterator rend(); 
	const_reverse_iterator rend() const /* FIX: comp can't pick rend */
	{ const_rep temp =  m_rep; return temp->rend(); }

	// Stack and Queue Operations
	void push_back( const value_type &x ); 
	void pop_back();

	// List Operations
	iterator insert( iterator p ); 
	iterator insert( iterator p, const value_type &x ); 
	void insert( iterator p, size_type n, const value_type &x);
	void insert( iterator p, const_iterator first, const_iterator last );
	void erase( iterator p); 
	iterator erase( iterator first, iterator last );
	void clear();

	// Other Operations
	size_type size() const { return m_rep->size(); }
	size_type empty() const { return m_rep->empty(); }
	size_type max_size() const { return m_rep->max_size(); }
	size_type capacity() const { return m_rep->capacity(); }

	void reserve( size_type n ); 
	void resize( size_type n ); 
	void resize( size_type n, const value_type &x );	

	bool operator==(const @{ClassV} &x) const 
	{ return *( this->m_rep ) == *( x.m_rep ); }
	bool operator!=(const @{ClassV} &x) const { return (!(*this == x)); }
	bool operator<(const @{ClassV} &x) const
	{ return *( this->m_rep ) < *( x.m_rep ); }

	bool operator>(const @{ClassV} &x) const { return (x < *this); }
	bool operator<=(const @{ClassV} &x) const { return (!(x < *this)); }
	bool operator>=(const @{ClassV} &x) const { return (!(*this < x)); }

	// Things to support GsDtGenVector
	typedef GsDtGenVector<@{ClassV}> GsDtType;
	typedef @{ClassDt} GsDtTypeElem;
	inline static const char* typeName() { return "@{ClassV}"; }
	GsString toString() const;
	int compare( const @{ClassV}& Other ) const; 
	bool isValid() const { return true; } 
};

CC_END_NAMESPACE

#endif /* defined(IN_@{HdrNameUC}) */


