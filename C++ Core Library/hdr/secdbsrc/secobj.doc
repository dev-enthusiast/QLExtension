      FUNCTION: SecDb - Building Security Objects

		  TAIL: SECDB OBJECT BUILDING - $Revision: 1.0 $ - $Date: 1993/03/03 22:29:04 $ - Copyright 1993 GS & Co.

		 COVER: SecDb

				Security

				Objects

      FUNCTION: Overview

   DESCRIPTION: SecDb is an object oriented database of securities.  Each
   				security within SecDb is considered to be an object.  These
   				objects are instances of a class (or type) of security.

				An example of this is a portfolio that consists of many
				different types of securities- there may be 20 options,
				10 forwards, etc.  In this case the security classes are
				'Options', 'Forwards' and 'Portfolio'.  The instances would
				be the individual options, forwards and portfolios
				(e.g. a DEM/USD option struck at 1.7 expiring 1Nov92).

				A message-based paradigm was used to implement objects within
				SecDb.  This means a security object consists of only one
				function that takes action based upon a message and message
				data passed to it from SecDb.  One function doesn't mean the
				security can't call other functions, it just means that SecDb
				only has to maintain one contact point with each security class.

				SecDb maintains the database of security instances, and their
				types.  Within this database a security is allowed to keep
				some of its own data.  It is easier to design a security class
				that keeps all of its data within the SecDb database, however
				some securities like portfolios require more flexibility and
				thus would be easier to store in an SQL database.

				An object function has the following general form:

					int DbObjFuncCurrency(
					SDB_OBJECT		*SecPtr,	// Pointer to security
					int				Msg,		// Type of operation
					SDB_M_DATA		*MsgData	// Data used for operation
					)
					{
						switch( Msg )
						{
							case SDB_MSG_START:
								// Initialization code
								break;

							case SDB_MSG_END:
								// Shutdown code
								break;

							case SDB_MSG_LOAD:
								// Instance loading and setup code
								break;

							case SDB_MSG_UNLOAD:
								// Instance freeing code
								break;

							case SDB_MSG_NEW:
								// New instance creation code
								break;

							case SDB_MSG_ADD:
								// Instance add to database code
								break;


								.
								.
								.


							default:
								return SecDbDefaultObjFunc( SecPtr, Msg, MsgData );
						}

						return TRUE;
					}

      FUNCTION: Quick Message Index

   DESCRIPTION: Message descriptions:
				--------------------

				SDB_MSG_START			- Initialize class
				SDB_MSG_END				- Remove class
				SDB_MSG_LOAD			- Load data for an instance
				SDB_MSG_UNLOAD			- Unload data for an instance
				SDB_MSG_NEW				- Create a new instance
				SDB_MSG_ADD				- Add an instance to a database
				SDB_MSG_UPDATE			- Update an instance in a database
				SDB_MSG_DELETE			- Remove an instance from a database
				SDB_MSG_INFERENCE		- Get an instance by inference
				SDB_MSG_GET_VALUE		- Get a value from an instance
				SDB_MSG_SET_VALUE		- Set a value for an instance
				SDB_MSG_GET_CHILD_LIST	- Get list of children for a value type
				SDB_MSG_ENUM_VALUE_TYPES- List supported value types
				SDB_MSG_DUMP_OBJ_DATA	- Display instance/class specific data
				SDB_MSG_DIDDLE_SET		- A diddle for an instance has been set
				SDB_MSG_DIDDLE_CHANGED	- An existing diddle has been changed
				SDB_MSG_DIDDLE_REMOVED	- An existing diddle has been removed

				SDB_MSG_EDIT			- Base offset of edit messages
				SDB_MSG_EDIT_INIT		- Instance is about to editted
				SDB_MSG_EDIT_EVENT		- An event happened during editting

				SDB_MSG_USER			- Start of class definable messages


				Function descriptions:
				---------------------

				SecDbChildListCreate		- Create a child list
				SecDbChildListDestroy		- Destroy a child list
				SecDbChildListAdd			- Add a child to a child list
				SecDbChildListAddRelative	- Add a 'relative' child to a list
				SecDbAddValueTypeToList		- Add a value type to a list
				SecDbDefaultObjFunc			- Default object function

      FUNCTION: SDB_MSG_START

       SUMMARY: Initialize the security class

   DESCRIPTION: SDB_MSG_START is the first message an object function ever
   				receives.  It should be used to initialize anything that is
   				specific to the class (not specific to an instance of the
   				class).

				SDB_MSG_START differs from SDB_MSG_LOAD in that the former is
				used to initialize the entire security class, and the later is
				used to initialize an instance of the class.

				The information specific to SDB_MSG_START is found in the
				'Start' element of the message data union (MsgData->Start).
				Within this union element is passed 'SecClassPtr' which is
				a pointer to the information structure for the specific class.

				Things that should be done:

					Connect to the database(s) where the instance information
					may reside.  Portfolio's for example could store their data
					within an SQL database the database(s) should be opened
					once, when the SDB_MSG_START message is received.  The
					SDB_MSG_END message is sent when the class is no longer
					required, so the database(s) should be closed then.

					Register all value types that the instances can perform,
					or require from other securities.  These value types can
					be stored in static variables in the function.

	  SEE ALSO: SDB_MSG_END, SDB_MSG_LOAD, SDB_MSG_UNLOAD

      FUNCTION: SDB_MSG_END

       SUMMARY: End a security class

   DESCRIPTION: SDB_MSG_END is the last message an object function ever
   				receives.  It should be used to release any class specific
   				resources (memory, databases, etc.)

	  SEE ALSO: SDB_MSG_START, SDB_MSG_LOAD, SDB_MSG_UNLOAD

      FUNCTION: SDB_MSG_LOAD

       SUMMARY: Load security instance information

   DESCRIPTION: A security is sent the SDB_MSG_LOAD message after it has been
   				loaded from the SecDb database.  When this message is received,
   				an object is supposed to load the remainder of its data (if an
   				external database is being used), and set up child lists, etc.

				There are three elements of the SDB_OBJECT structure that
				are used by security objects.  They are as follows:

					'Mem'		- Pointer to instance specific memory stored
								  and retrieved from the security database.
								  This memory should not be used for transient
								  information such as pointers to other parts
								  of memory, temporary variables, etc.

					'MemSize'	- Size of the memory pointed to by 'Mem'

					'Object'	- Transient memory allocated and managed by
								  the security object itself without any
								  interference from SecDb.  The security object
								  should use this memory to maintain pointers
								  to child lists, etc.


				Things that should be done:

					Build child lists.  

					Read instance data from external databases.


				When SDB_MSG_UNLOAD is received, all of the resources allocated
				during SDB_MSG_LOAD should be released.

	  SEE ALSO: SDB_MSG_UNLOAD, SDB_MSG_START, SDB_MSG_END

      FUNCTION: SDB_MSG_UNLOAD

       SUMMARY: Unload security instance information

   DESCRIPTION: The SDB_MSG_UNLOAD message is send to a security when the
   				security is no longer being referenced, and the security
   				is being removed from the dead-pool.


				Things that should be done:

					Destroy child lists.

					Release allocated memory

					Release other resources allocated during SDB_MSG_LOAD.

	  SEE ALSO: SDB_MSG_LOAD, SDB_MSG_START, SDB_MSG_END

      FUNCTION: SDB_MSG_NEW

       SUMMARY: Create a new instance of a security

   DESCRIPTION: The SDB_MSG_NEW message is sent to a object function when a new
   				instance of a security is to be created.

      FUNCTION: SDB_MSG_ADD

       SUMMARY: Add a security instance to a database

   DESCRIPTION: 

      FUNCTION: SDB_MSG_UPDATE

       SUMMARY: Update a security instance within a database

   DESCRIPTION: 

      FUNCTION: SDB_MSG_DELETE

       SUMMARY: Delete a security instance from a database

   DESCRIPTION: 

      FUNCTION: SDB_MSG_INFERENCE

       SUMMARY: Get an security instance by inference

   DESCRIPTION: 

      FUNCTION: SDB_MSG_GET_VALUE

       SUMMARY: Get a value from an security instance

   DESCRIPTION: 

      FUNCTION: SDB_MSG_SET_VALUE

       SUMMARY: Set a value for an instance

   DESCRIPTION: 

      FUNCTION: SDB_MSG_GET_CHILD_LIST

       SUMMARY: Get list of children for a value type

   DESCRIPTION: 

      FUNCTION: SDB_MSG_ENUM_VALUE_TYPES

       SUMMARY: List supported value types

   DESCRIPTION: The SDB_MSG_ENUM_VALUE_TYPES message is sent to a security
				to obtain a list of value types that the security can support.
				The SecDbAddValueTypeToList function should be called for
				each value type supported.

	  SEE ALSO: SecDbAddValueTypeToList, SecDbValueTypeFromName

       EXAMPLE: /*
       			**	Example of SDB_MSG_ENUM_VALUE_TYPES message and the
       			**	SecDbAddValueTypeToList function
       			*/

					case SDB_MSG_ENUM_VALUE_TYPES:
						SecDbAddValueTypeToList( MsgData,
								SecDbValuePrice,
								SDB_EDIT_DEFAULTS );
						SecDbAddValueTypeToList( MsgData,
								SecDbValueDollarPrice,
								SDB_EDIT_DEFAULTS );
						break;

      FUNCTION: SDB_MSG_DUMP_OBJ_DATA

       SUMMARY: Display instance/class specific data

   DESCRIPTION: The SDB_MSG_DUMP_OBJ_DATA is used to help developers debug
   				security objects.  The format for the output is completely
   				up to the object.  A pointer to a print function, and a
   				concomitant handle are passed in the message data union.

       EXAMPLE: /*
       			**	Example of SDB_MSG_DUMP_OBJ_DATA message
       			*/

					case SDB_MSG_DUMP_OBJ_DATA:
						Print	= MsgData->DumpObjData.Print;
						Handle	= MsgData->DumpObjData.Handle;

						(*Print)( Handle, "Something\n" );
						(*Print)( Handle, "Something else\n" );
						break;

      FUNCTION: SDB_MSG_DIDDLE_SET

       SUMMARY: A diddle for an security instance has been set

   DESCRIPTION: When a value type of a security is being diddled, the security
   				is sent the SDB_MSG_DIDDLE_SET message.

      FUNCTION: SDB_MSG_DIDDLE_CHANGED

       SUMMARY: An existing diddle has been changed

   DESCRIPTION: 

      FUNCTION: SDB_MSG_DIDDLE_REMOVED

       SUMMARY: An existing diddle has been removed

   DESCRIPTION: 

      FUNCTION: SDB_MSG_EDIT

       SUMMARY: 

   DESCRIPTION: 

      FUNCTION: SDB_MSG_EDIT_INIT

       SUMMARY: Instance is about to editted

   DESCRIPTION: .

      FUNCTION: SDB_MSG_EDIT_EVENT

       SUMMARY: An event happened during editting

   DESCRIPTION: .

      FUNCTION: SDB_MSG_USER

       SUMMARY: Object definable message

   DESCRIPTION: Objects are allowed to define their own messages.  The message
   				numbers are all based off of SDB_MSG_USER.

      FUNCTION: SecDbChildListCreate

       SUMMARY: Create a child list

         USAGE:	SDB_CHILD_LIST *SecDbChildListCreate(
         		void		*Data,
         		int			Flags)

   DESCRIPTION: .

      FUNCTION: SecDbChildListDestroy

       SUMMARY: Destroy a child list

         USAGE:	void SecDbChildListDestroy(
         		SDB_CHILD_LIST	*ChildList)

   DESCRIPTION: 

      FUNCTION: SecDbChildListAdd

       SUMMARY: Add a child to a child list

         USAGE:	int SecDbChildListAdd(
         		SDB_CHILD_LIST		*ChildList,		// Child list to add to
         		double				Quantity,		// Quantity of child
         		SDB_OBJECT			*SecPtr,		// Child security
         		SDB_VALUE_PARAMS	*ValueParams,	// Value parameters
         		void				*ResultPtr)		// Pointer to target

   DESCRIPTION: .

      FUNCTION: SecDbChildListAddRelative

       SUMMARY: Add a 'relative' child to a child list

         USAGE:	int SecDbChildListAdd(
         		SDB_CHILD_LIST		*ChildList,		// Child list to add to
         		double				Quantity,		// Quantity of child
         		int					SecNum,			// Child security
         		SDB_VALUE_PARAMS	*ValueParams,	// Value parameters
         		unsigned int  		ResultOffset)	// Pointer to target

   DESCRIPTION: .

      FUNCTION: SecDbChildListFind

       SUMMARY: Find a child within a child list

         USAGE:	SDB_CHILD_LIST_ELEMENT *SecDbChildListFind(
         		SDB_CHILD_LIST		*ChildList,		// List to search
         		char				*SecurityName,	// Name of security
         		SDB_VALUE_PARAMS	*ValueParams)	// Value parameters

   DESCRIPTION: .

      FUNCTION: SecDbAddValueTypeToList

       SUMMARY: Add a value type to a list

         USAGE:	void SecDbAddValueTypeToList(
				SDB_M_DATA		*MsgData,		// Pointer to message data
				SDB_VALUE_TYPE	ValueType,		// Value type to add
				int				EditPromptX,	// X location of prompt
				int				EditPromptY,	// Y location of prompt
				int				EditDataX,		// X location of data (input)
				int				EditDataY,		// Y location of data (input)
				int				EditWidth,		// Width of data (input)
				int				EditLength,		// Length of data (input)
				int				EditFlags)		// Flags

   DESCRIPTION: When an object receives the SDB_MSG_ENUM_VALUE_TYPES message
   				it must use the SecDbAddValueTypeToList function to return
   				a list of supported value types.

				If an object does not want or need to support detailed
				editting information, the SDB_EDIT_DEFAULTS macro can be
				used.  This macro sets all of the 'Edit' prefixed arguments
				to defaults.

				If an object sets the 'Edit' prefixed arguments to something
				other than defaults, the generic security editors built on
				top of SecDb can edit and display the security data in a more
				readable way.

				Possible values for 'EditFlags' (can be or'ed together):

					SDB_HIDDEN		- Not visible when editting

					SDB_CALCULATED	- Value is calculated

					SDB_STATIC		- Value does not change

       EXAMPLE: /*
       			**	Example of SDB_MSG_ENUM_VALUE_TYPES message and the
       			**	SecDbAddValueTypeToList function
       			*/

					case SDB_MSG_ENUM_VALUE_TYPES:
						SecDbAddValueTypeToList( MsgData,
								SecDbValuePrice,
								SDB_EDIT_DEFAULTS );
						SecDbAddValueTypeToList( MsgData,
								SecDbValueDollarPrice,
								SDB_EDIT_DEFAULTS );
						break;

