//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.5
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace QuantLib {

public class envsxp_struct : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal envsxp_struct(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(envsxp_struct obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~envsxp_struct() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NQuantLibcPINVOKE.delete_envsxp_struct(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public SEXPREC frame {
    set {
      NQuantLibcPINVOKE.envsxp_struct_frame_set(swigCPtr, SEXPREC.getCPtr(value));
      if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = NQuantLibcPINVOKE.envsxp_struct_frame_get(swigCPtr);
      SEXPREC ret = (cPtr == global::System.IntPtr.Zero) ? null : new SEXPREC(cPtr, false);
      if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SEXPREC enclos {
    set {
      NQuantLibcPINVOKE.envsxp_struct_enclos_set(swigCPtr, SEXPREC.getCPtr(value));
      if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = NQuantLibcPINVOKE.envsxp_struct_enclos_get(swigCPtr);
      SEXPREC ret = (cPtr == global::System.IntPtr.Zero) ? null : new SEXPREC(cPtr, false);
      if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SEXPREC hashtab {
    set {
      NQuantLibcPINVOKE.envsxp_struct_hashtab_set(swigCPtr, SEXPREC.getCPtr(value));
      if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = NQuantLibcPINVOKE.envsxp_struct_hashtab_get(swigCPtr);
      SEXPREC ret = (cPtr == global::System.IntPtr.Zero) ? null : new SEXPREC(cPtr, false);
      if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public envsxp_struct() : this(NQuantLibcPINVOKE.new_envsxp_struct(), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
