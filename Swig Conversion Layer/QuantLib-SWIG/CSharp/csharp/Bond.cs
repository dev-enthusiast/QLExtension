/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace QuantLib {

public class Bond : Instrument {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal Bond(global::System.IntPtr cPtr, bool cMemoryOwn) : base(NQuantLibcPINVOKE.Bond_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Bond obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Bond() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NQuantLibcPINVOKE.delete_Bond(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public Bond(uint settlementDays, Calendar calendar, double faceAmount, Date maturityDate, Date issueDate, Leg cashflows) : this(NQuantLibcPINVOKE.new_Bond__SWIG_0(settlementDays, Calendar.getCPtr(calendar), faceAmount, Date.getCPtr(maturityDate), Date.getCPtr(issueDate), Leg.getCPtr(cashflows)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public Bond(uint settlementDays, Calendar calendar, double faceAmount, Date maturityDate, Date issueDate) : this(NQuantLibcPINVOKE.new_Bond__SWIG_1(settlementDays, Calendar.getCPtr(calendar), faceAmount, Date.getCPtr(maturityDate), Date.getCPtr(issueDate)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public Bond(uint settlementDays, Calendar calendar, double faceAmount, Date maturityDate) : this(NQuantLibcPINVOKE.new_Bond__SWIG_2(settlementDays, Calendar.getCPtr(calendar), faceAmount, Date.getCPtr(maturityDate)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public double nextCouponRate(Date d) {
    double ret = NQuantLibcPINVOKE.Bond_nextCouponRate__SWIG_0(swigCPtr, Date.getCPtr(d));
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double nextCouponRate() {
    double ret = NQuantLibcPINVOKE.Bond_nextCouponRate__SWIG_1(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double previousCouponRate(Date d) {
    double ret = NQuantLibcPINVOKE.Bond_previousCouponRate__SWIG_0(swigCPtr, Date.getCPtr(d));
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double previousCouponRate() {
    double ret = NQuantLibcPINVOKE.Bond_previousCouponRate__SWIG_1(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint settlementDays() {
    uint ret = NQuantLibcPINVOKE.Bond_settlementDays(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Date settlementDate(Date d) {
    Date ret = new Date(NQuantLibcPINVOKE.Bond_settlementDate__SWIG_0(swigCPtr, Date.getCPtr(d)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Date settlementDate() {
    Date ret = new Date(NQuantLibcPINVOKE.Bond_settlementDate__SWIG_1(swigCPtr), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Date startDate() {
    Date ret = new Date(NQuantLibcPINVOKE.Bond_startDate(swigCPtr), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Date maturityDate() {
    Date ret = new Date(NQuantLibcPINVOKE.Bond_maturityDate(swigCPtr), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Date issueDate() {
    Date ret = new Date(NQuantLibcPINVOKE.Bond_issueDate(swigCPtr), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Leg cashflows() {
    Leg ret = new Leg(NQuantLibcPINVOKE.Bond_cashflows(swigCPtr), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Leg redemptions() {
    Leg ret = new Leg(NQuantLibcPINVOKE.Bond_redemptions(swigCPtr), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public CashFlow redemption() {
    CashFlow ret = new CashFlow(NQuantLibcPINVOKE.Bond_redemption(swigCPtr), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Calendar calendar() {
    Calendar ret = new Calendar(NQuantLibcPINVOKE.Bond_calendar(swigCPtr), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public DoubleVector notionals() {
    DoubleVector ret = new DoubleVector(NQuantLibcPINVOKE.Bond_notionals(swigCPtr), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double notional(Date d) {
    double ret = NQuantLibcPINVOKE.Bond_notional__SWIG_0(swigCPtr, Date.getCPtr(d));
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double notional() {
    double ret = NQuantLibcPINVOKE.Bond_notional__SWIG_1(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double cleanPrice() {
    double ret = NQuantLibcPINVOKE.Bond_cleanPrice__SWIG_0(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double cleanPrice(double yield, DayCounter dc, Compounding compounding, Frequency frequency, Date settlement) {
    double ret = NQuantLibcPINVOKE.Bond_cleanPrice__SWIG_1(swigCPtr, yield, DayCounter.getCPtr(dc), (int)compounding, (int)frequency, Date.getCPtr(settlement));
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double cleanPrice(double yield, DayCounter dc, Compounding compounding, Frequency frequency) {
    double ret = NQuantLibcPINVOKE.Bond_cleanPrice__SWIG_2(swigCPtr, yield, DayCounter.getCPtr(dc), (int)compounding, (int)frequency);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double dirtyPrice() {
    double ret = NQuantLibcPINVOKE.Bond_dirtyPrice__SWIG_0(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double dirtyPrice(double yield, DayCounter dc, Compounding compounding, Frequency frequency, Date settlement) {
    double ret = NQuantLibcPINVOKE.Bond_dirtyPrice__SWIG_1(swigCPtr, yield, DayCounter.getCPtr(dc), (int)compounding, (int)frequency, Date.getCPtr(settlement));
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double dirtyPrice(double yield, DayCounter dc, Compounding compounding, Frequency frequency) {
    double ret = NQuantLibcPINVOKE.Bond_dirtyPrice__SWIG_2(swigCPtr, yield, DayCounter.getCPtr(dc), (int)compounding, (int)frequency);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double yield(DayCounter dc, Compounding compounding, Frequency freq, double accuracy, uint maxEvaluations) {
    double ret = NQuantLibcPINVOKE.Bond_yield__SWIG_0(swigCPtr, DayCounter.getCPtr(dc), (int)compounding, (int)freq, accuracy, maxEvaluations);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double yield(DayCounter dc, Compounding compounding, Frequency freq, double accuracy) {
    double ret = NQuantLibcPINVOKE.Bond_yield__SWIG_1(swigCPtr, DayCounter.getCPtr(dc), (int)compounding, (int)freq, accuracy);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double yield(DayCounter dc, Compounding compounding, Frequency freq) {
    double ret = NQuantLibcPINVOKE.Bond_yield__SWIG_2(swigCPtr, DayCounter.getCPtr(dc), (int)compounding, (int)freq);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double yield(double cleanPrice, DayCounter dc, Compounding compounding, Frequency freq, Date settlement, double accuracy, uint maxEvaluations) {
    double ret = NQuantLibcPINVOKE.Bond_yield__SWIG_3(swigCPtr, cleanPrice, DayCounter.getCPtr(dc), (int)compounding, (int)freq, Date.getCPtr(settlement), accuracy, maxEvaluations);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double yield(double cleanPrice, DayCounter dc, Compounding compounding, Frequency freq, Date settlement, double accuracy) {
    double ret = NQuantLibcPINVOKE.Bond_yield__SWIG_4(swigCPtr, cleanPrice, DayCounter.getCPtr(dc), (int)compounding, (int)freq, Date.getCPtr(settlement), accuracy);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double yield(double cleanPrice, DayCounter dc, Compounding compounding, Frequency freq, Date settlement) {
    double ret = NQuantLibcPINVOKE.Bond_yield__SWIG_5(swigCPtr, cleanPrice, DayCounter.getCPtr(dc), (int)compounding, (int)freq, Date.getCPtr(settlement));
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double yield(double cleanPrice, DayCounter dc, Compounding compounding, Frequency freq) {
    double ret = NQuantLibcPINVOKE.Bond_yield__SWIG_6(swigCPtr, cleanPrice, DayCounter.getCPtr(dc), (int)compounding, (int)freq);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double accruedAmount(Date settlement) {
    double ret = NQuantLibcPINVOKE.Bond_accruedAmount__SWIG_0(swigCPtr, Date.getCPtr(settlement));
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double accruedAmount() {
    double ret = NQuantLibcPINVOKE.Bond_accruedAmount__SWIG_1(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double settlementValue() {
    double ret = NQuantLibcPINVOKE.Bond_settlementValue__SWIG_0(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double settlementValue(double cleanPrice) {
    double ret = NQuantLibcPINVOKE.Bond_settlementValue__SWIG_1(swigCPtr, cleanPrice);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
