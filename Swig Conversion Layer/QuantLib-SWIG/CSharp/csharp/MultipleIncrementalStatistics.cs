/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace QuantLib {

public class MultipleIncrementalStatistics : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal MultipleIncrementalStatistics(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(MultipleIncrementalStatistics obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~MultipleIncrementalStatistics() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NQuantLibcPINVOKE.delete_MultipleIncrementalStatistics(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public MultipleIncrementalStatistics(uint dimension) : this(NQuantLibcPINVOKE.new_MultipleIncrementalStatistics(dimension), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public uint size() {
    uint ret = NQuantLibcPINVOKE.MultipleIncrementalStatistics_size(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint samples() {
    uint ret = NQuantLibcPINVOKE.MultipleIncrementalStatistics_samples(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double weightSum() {
    double ret = NQuantLibcPINVOKE.MultipleIncrementalStatistics_weightSum(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public DoubleVector mean() {
    DoubleVector ret = new DoubleVector(NQuantLibcPINVOKE.MultipleIncrementalStatistics_mean(swigCPtr), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public DoubleVector variance() {
    DoubleVector ret = new DoubleVector(NQuantLibcPINVOKE.MultipleIncrementalStatistics_variance(swigCPtr), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public DoubleVector standardDeviation() {
    DoubleVector ret = new DoubleVector(NQuantLibcPINVOKE.MultipleIncrementalStatistics_standardDeviation(swigCPtr), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public DoubleVector errorEstimate() {
    DoubleVector ret = new DoubleVector(NQuantLibcPINVOKE.MultipleIncrementalStatistics_errorEstimate(swigCPtr), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public DoubleVector skewness() {
    DoubleVector ret = new DoubleVector(NQuantLibcPINVOKE.MultipleIncrementalStatistics_skewness(swigCPtr), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public DoubleVector kurtosis() {
    DoubleVector ret = new DoubleVector(NQuantLibcPINVOKE.MultipleIncrementalStatistics_kurtosis(swigCPtr), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public DoubleVector min() {
    DoubleVector ret = new DoubleVector(NQuantLibcPINVOKE.MultipleIncrementalStatistics_min(swigCPtr), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public DoubleVector max() {
    DoubleVector ret = new DoubleVector(NQuantLibcPINVOKE.MultipleIncrementalStatistics_max(swigCPtr), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Matrix covariance() {
    Matrix ret = new Matrix(NQuantLibcPINVOKE.MultipleIncrementalStatistics_covariance(swigCPtr), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Matrix correlation() {
    Matrix ret = new Matrix(NQuantLibcPINVOKE.MultipleIncrementalStatistics_correlation(swigCPtr), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void reset() {
    NQuantLibcPINVOKE.MultipleIncrementalStatistics_reset(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public void add(DoubleVector value, double weight) {
    NQuantLibcPINVOKE.MultipleIncrementalStatistics_add__SWIG_0(swigCPtr, DoubleVector.getCPtr(value), weight);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public void add(DoubleVector value) {
    NQuantLibcPINVOKE.MultipleIncrementalStatistics_add__SWIG_1(swigCPtr, DoubleVector.getCPtr(value));
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public void add(QlArray value, double weight) {
    NQuantLibcPINVOKE.MultipleIncrementalStatistics_add__SWIG_2(swigCPtr, QlArray.getCPtr(value), weight);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public void add(QlArray value) {
    NQuantLibcPINVOKE.MultipleIncrementalStatistics_add__SWIG_3(swigCPtr, QlArray.getCPtr(value));
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
