/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace QuantLib {

public class ExchangeRateManager : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ExchangeRateManager(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ExchangeRateManager obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ExchangeRateManager() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NQuantLibcPINVOKE.delete_ExchangeRateManager(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public static ExchangeRateManager instance() {
    ExchangeRateManager ret = new ExchangeRateManager(NQuantLibcPINVOKE.ExchangeRateManager_instance(), false);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void add(ExchangeRate arg0, Date startDate, Date endDate) {
    NQuantLibcPINVOKE.ExchangeRateManager_add__SWIG_0(swigCPtr, ExchangeRate.getCPtr(arg0), Date.getCPtr(startDate), Date.getCPtr(endDate));
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public void add(ExchangeRate arg0, Date startDate) {
    NQuantLibcPINVOKE.ExchangeRateManager_add__SWIG_1(swigCPtr, ExchangeRate.getCPtr(arg0), Date.getCPtr(startDate));
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public void add(ExchangeRate arg0) {
    NQuantLibcPINVOKE.ExchangeRateManager_add__SWIG_2(swigCPtr, ExchangeRate.getCPtr(arg0));
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public ExchangeRate lookup(Currency source, Currency target, Date date, ExchangeRate.Type type) {
    ExchangeRate ret = new ExchangeRate(NQuantLibcPINVOKE.ExchangeRateManager_lookup__SWIG_0(swigCPtr, Currency.getCPtr(source), Currency.getCPtr(target), Date.getCPtr(date), (int)type), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ExchangeRate lookup(Currency source, Currency target, Date date) {
    ExchangeRate ret = new ExchangeRate(NQuantLibcPINVOKE.ExchangeRateManager_lookup__SWIG_1(swigCPtr, Currency.getCPtr(source), Currency.getCPtr(target), Date.getCPtr(date)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void clear() {
    NQuantLibcPINVOKE.ExchangeRateManager_clear(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
