//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.5
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace QuantLib {

public class BoundaryCondition : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal BoundaryCondition(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(BoundaryCondition obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~BoundaryCondition() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NQuantLibcPINVOKE.delete_BoundaryCondition(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public _BoundaryCondition __deref__() {
    global::System.IntPtr cPtr = NQuantLibcPINVOKE.BoundaryCondition___deref__(swigCPtr);
    _BoundaryCondition ret = (cPtr == global::System.IntPtr.Zero) ? null : new _BoundaryCondition(cPtr, false);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isNull() {
    bool ret = NQuantLibcPINVOKE.BoundaryCondition_isNull(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public BoundaryCondition() : this(NQuantLibcPINVOKE.new_BoundaryCondition(), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public static readonly _BoundaryCondition.Side NoSide = (_BoundaryCondition.Side)NQuantLibcPINVOKE.BoundaryCondition_NoSide_get();
  public static readonly _BoundaryCondition.Side Upper = (_BoundaryCondition.Side)NQuantLibcPINVOKE.BoundaryCondition_Upper_get();
  public static readonly _BoundaryCondition.Side Lower = (_BoundaryCondition.Side)NQuantLibcPINVOKE.BoundaryCondition_Lower_get();
}

}
