//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.5
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace QuantLib {

public class SABRInterpolation : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal SABRInterpolation(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SABRInterpolation obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~SABRInterpolation() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NQuantLibcPINVOKE.delete_SABRInterpolation(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public SABRInterpolation(QlArray x, QlArray y, double expiry, double forward, double alpha, double beta, double sigma0, double rho, bool isalphafixed, bool isbetafixed, bool issigma0fixed, bool isrhofixed) : this(NQuantLibcPINVOKE.new_SABRInterpolation__SWIG_0(QlArray.getCPtr(x), QlArray.getCPtr(y), expiry, forward, alpha, beta, sigma0, rho, isalphafixed, isbetafixed, issigma0fixed, isrhofixed), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public SABRInterpolation(QlArray x, QlArray y, double expiry, double forward, double alpha, double beta, double sigma0, double rho, bool isalphafixed, bool isbetafixed, bool issigma0fixed) : this(NQuantLibcPINVOKE.new_SABRInterpolation__SWIG_1(QlArray.getCPtr(x), QlArray.getCPtr(y), expiry, forward, alpha, beta, sigma0, rho, isalphafixed, isbetafixed, issigma0fixed), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public SABRInterpolation(QlArray x, QlArray y, double expiry, double forward, double alpha, double beta, double sigma0, double rho, bool isalphafixed, bool isbetafixed) : this(NQuantLibcPINVOKE.new_SABRInterpolation__SWIG_2(QlArray.getCPtr(x), QlArray.getCPtr(y), expiry, forward, alpha, beta, sigma0, rho, isalphafixed, isbetafixed), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public SABRInterpolation(QlArray x, QlArray y, double expiry, double forward, double alpha, double beta, double sigma0, double rho, bool isalphafixed) : this(NQuantLibcPINVOKE.new_SABRInterpolation__SWIG_3(QlArray.getCPtr(x), QlArray.getCPtr(y), expiry, forward, alpha, beta, sigma0, rho, isalphafixed), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public SABRInterpolation(QlArray x, QlArray y, double expiry, double forward, double alpha, double beta, double sigma0, double rho) : this(NQuantLibcPINVOKE.new_SABRInterpolation__SWIG_4(QlArray.getCPtr(x), QlArray.getCPtr(y), expiry, forward, alpha, beta, sigma0, rho), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public double call(double x, bool allowExtrapolation) {
    double ret = NQuantLibcPINVOKE.SABRInterpolation_call__SWIG_0(swigCPtr, x, allowExtrapolation);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double call(double x) {
    double ret = NQuantLibcPINVOKE.SABRInterpolation_call__SWIG_1(swigCPtr, x);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double alpha() {
    double ret = NQuantLibcPINVOKE.SABRInterpolation_alpha(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double beta() {
    double ret = NQuantLibcPINVOKE.SABRInterpolation_beta(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double nu() {
    double ret = NQuantLibcPINVOKE.SABRInterpolation_nu(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double rho() {
    double ret = NQuantLibcPINVOKE.SABRInterpolation_rho(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double maxError() {
    double ret = NQuantLibcPINVOKE.SABRInterpolation_maxError(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double update() {
    double ret = NQuantLibcPINVOKE.SABRInterpolation_update(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
